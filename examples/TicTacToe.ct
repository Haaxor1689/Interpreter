func IsValidColumn(var column: string): bool {
	return ||(==(column, "X"), ||(==(column, "Y"), ==(column, "Z")));
}

func IsValidRow(var row: string): bool {
	return ||(==(row, "A"), ||(==(row, "B"), ==(row, "C")));
}

object Column {
	var A = " ";
	var B = " ";
	var C = " ";
}

object Grid {
	var X = new Column{};
	var Y = new Column{};
	var Z = new Column{};
}

func PrintGrid(var grid: Grid): void {
	WriteLine(" |A|B|C|");
	WriteLine("--------");
	for var i in 0 ... 2 {
		Write(i);
		for var j in [ "A", "B", "C", ] {
			Write(+("|", grid[i][j]));
		}
		WriteLine("|");
		WriteLine("--------");
	}
}

func Play(): string {
	var shouldEnd = false;

	var grid: Grid = new Grid{};

	var currentPlayer = "X";

	while !shouldEnd {
		PrintGrid(grid);
		WriteLine(+("Player ", +(currentPlayer, "'s turn")));

		WriteLine("Select row:");
		var row = ReadText();
		if !IsValidRow(row) {
			WriteLine(+("Invalid row ", row));
		}

		WriteLine("Select column:");
		var column = ReadText();
		if !IsValidColumn(column) {
			WriteLine(+("Invalid column ", column));
		}

		if ==(grid[column][row], " ") {
			grid[column][row] = currentPlayer;
			if ==(currentPlayer, "X") {
				currentPlayer = "O";
			} else {
				currentPlayer = "X";
			}
		}
	}

	return +("Player ", +(currentPlayer, " won"));
}
